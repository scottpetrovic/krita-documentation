# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2018
# This file is distributed under the same license as the Krita Manual
# package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2018.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Krita Manual 1.0\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2018-05-18 16:21+0200\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.3.4\n"

#: ../../user_manual/getting_started/basic_concepts.rst:19
msgid "Basic Concepts"
msgstr ""

#: ../../user_manual/getting_started/basic_concepts.rst:21
msgid ""
"If this is your first foray into digital painting, this page should give "
"you a brief introduction about the basic but important concepts required "
"for getting started with digital painting in Krita."
msgstr ""

#: ../../user_manual/getting_started/basic_concepts.rst:23
msgid ""
"This page is very, very long because it tries to cover all the important "
"things you should know Krita is capable of, and Krita is really powerful."
" So this page can also be considered a guide through Krita's most "
"important functionality. Hopefully it will help you grasp what buttons "
"are for, even if you don't know the exact purpose of them."
msgstr ""

#: ../../user_manual/getting_started/basic_concepts.rst
msgid "Contents"
msgstr ""

#: ../../user_manual/getting_started/basic_concepts.rst:28
msgid "Raster and Vector"
msgstr ""

#: ../../user_manual/getting_started/basic_concepts.rst:30
msgid ""
"Even though Krita is primarily a raster based application, it has some "
"vector editing capabilities as well. If you are new to Digital painting "
"medium, it is necessary that you know the concepts of raster and vector."
msgstr ""

#: ../../user_manual/getting_started/basic_concepts.rst:32
msgid ""
"In digital imaging, a pixel (Picture Element) is a basic and lowest "
"element of an Image. It is basically a grid of points each displaying "
"specific color. Raster editing is manipulating and editing these pixels. "
"For example when you take a 1-pixel brush which is colored black and "
"painting on the white canvas in Krita you are actually changing the color"
" of the pixel beneath your brush from white to black.When you zoom in and"
" see a brush stroke you can notice many small squares with colors, these "
"are pixels"
msgstr ""

msgid ".. image:: images/en/Pixels-brushstroke.png"
msgstr ""

#: ../../user_manual/getting_started/basic_concepts.rst:37
msgid ""
"In contrast, vector graphic work is based on mathematical expressions. "
"They are independent of the pixel. For example, when you draw a rectangle"
" on a vector layer in Krita you are actually drawing paths passing "
"through points called nodes which are located on specific co-ordinates on"
" the 'x' and 'y' axes. When you re-size or move these points the computer"
" calculates and redraws the path and displays the newly formed shape to "
"you. Hence you can re-size the vector shape to any extent without any "
"loss in quality."
msgstr ""

#: ../../user_manual/getting_started/basic_concepts.rst:39
msgid "In Krita everything which is not on a vector layer is raster based."
msgstr ""

#: ../../user_manual/getting_started/basic_concepts.rst:42
msgid "Images, Views and Windows"
msgstr ""

#: ../../user_manual/getting_started/basic_concepts.rst:44
msgid ""
"In a painting program, there are three major containers that make up your"
" work-space."
msgstr ""

#: ../../user_manual/getting_started/basic_concepts.rst:47
msgid "Image"
msgstr ""

#: ../../user_manual/getting_started/basic_concepts.rst:49
msgid "The most important one is the **Image**."
msgstr ""

#: ../../user_manual/getting_started/basic_concepts.rst:51
msgid ""
"This is a individual copy of the image you opened or made via the file "
"dialog, and where you edit your file. Krita can allow you to open the "
"file as a new copy via the file menu, or to save it as a new file, or "
"make an incremental save. An image contains layers, a colour space, a "
"canvas size and meta-data such as creator, data created, and DPI. Krita "
"can open multiple images at once, you can switch between them via the "
":guilabel:`window` menu."
msgstr ""

#: ../../user_manual/getting_started/basic_concepts.rst:53
msgid ""
"Because the image is a working copy of the image on the hard drive, you "
"can do a lot of little saving tricks with it:"
msgstr ""

#: ../../user_manual/getting_started/basic_concepts.rst:55
msgid "New"
msgstr ""

#: ../../user_manual/getting_started/basic_concepts.rst:56
msgid ""
"Makes a new image. When you press :menuselection:`save`, you make a new "
"file on the hard drive."
msgstr ""

#: ../../user_manual/getting_started/basic_concepts.rst:57
msgid "Open"
msgstr ""

#: ../../user_manual/getting_started/basic_concepts.rst:58
msgid ""
"Makes an internal copy of an existing image. When you press "
":menuselection:`save` you will overwrite the original existing image with"
" your working copy."
msgstr ""

#: ../../user_manual/getting_started/basic_concepts.rst:59
msgid "Open existing image as new"
msgstr ""

#: ../../user_manual/getting_started/basic_concepts.rst:60
msgid ""
"Similar to Open, however, :menuselection:`save` will request you to "
"specify a saving location: you're making a new copy. This is similar to "
":menuselection:`import` in other programs."
msgstr ""

#: ../../user_manual/getting_started/basic_concepts.rst:61
msgid "Create Copy From Current Image"
msgstr ""

#: ../../user_manual/getting_started/basic_concepts.rst:62
msgid ""
"Similar to :menuselection:`Open Existing Image as new` but with the "
"currently selected image."
msgstr ""

#: ../../user_manual/getting_started/basic_concepts.rst:64
msgid "Save incremental"
msgstr ""

#: ../../user_manual/getting_started/basic_concepts.rst:64
msgid ""
"Allows you to quickly make a snapshot of the current image by making a "
"new file with a versioning number added to it."
msgstr ""

#: ../../user_manual/getting_started/basic_concepts.rst:66
msgid ""
"These options are great for people doing production work, who need to "
"switch between files quickly, or have backup files in case they do "
"something extreme. Krita also has a file backup system in the form of "
"auto-saves and back files and crash recovery. You can configure these in "
"the general settings."
msgstr ""

#: ../../user_manual/getting_started/basic_concepts.rst:68
msgid "You view the image via a **View**."
msgstr ""

#: ../../user_manual/getting_started/basic_concepts.rst:71
msgid "View"
msgstr ""

#: ../../user_manual/getting_started/basic_concepts.rst:74
msgid ""
"A view is the window onto your image. Krita allows you to have multiple "
"views, and you can manipulate the view to zoom, rotate and mirror and "
"modify the colour of the way you see an image without editing the image "
"itself. This is very useful for artists, as changing the way they view "
"the image is a common way to diagnose mistakes, like skewing to one side."
" Mirroring with :kbd:`m` makes such skewing easy to identify."
msgstr ""

#: ../../user_manual/getting_started/basic_concepts.rst:77
msgid ""
"If you have trouble drawing certain curves you will enjoy using rotation "
"for drawing, and of course there is zooming in and out for precision and "
"rough work."
msgstr ""

#: ../../user_manual/getting_started/basic_concepts.rst:83
msgid ".. image:: images/en/Krita_multiple_views.png"
msgstr ""

#: ../../user_manual/getting_started/basic_concepts.rst:83
msgid "Multiple views of the same image in Krita"
msgstr ""

#: ../../user_manual/getting_started/basic_concepts.rst:85
msgid ""
"Multiple views are possible in Krita via :menuselection:`window --> new "
"view --> image name`. You can switch between them via the "
":guilabel:`window` menu, or :kbd:`ctrl + tab`, or keep them in the same "
"area when **subwindow** mode is active in the :ref:`settings "
"<general_settings>`, via :menuselection:`Window --> Tile`."
msgstr ""

#: ../../user_manual/getting_started/basic_concepts.rst:88
msgid "Dockers"
msgstr ""

#: ../../user_manual/getting_started/basic_concepts.rst:90
msgid ""
"Dockers are little subwindows in :ref:`Krita's interface <navigation>`. "
"They contain useful tools, like the color selector, layer stack, tool "
"options etc."
msgstr ""

msgid ".. image:: images/en/Dockers.png"
msgstr ""

#: ../../user_manual/getting_started/basic_concepts.rst:96
msgid "The image above shows some of the dockers in Krita"
msgstr ""

#: ../../user_manual/getting_started/basic_concepts.rst:99
msgid "All the views and the dockers are held inside **Windows**"
msgstr ""

#: ../../user_manual/getting_started/basic_concepts.rst:102
msgid "Window"
msgstr ""

#: ../../user_manual/getting_started/basic_concepts.rst:104
msgid ""
"If you've used a computer before, you know what windows are: They are big"
" containers for your computer programs."
msgstr ""

#: ../../user_manual/getting_started/basic_concepts.rst:107
msgid ""
"Krita allows you to have multiple windows via :menuselection:`window --> "
"new window`. You can then drag this to another monitor for multi-monitor "
"use."
msgstr ""

#: ../../user_manual/getting_started/basic_concepts.rst:110
msgid "The image below shows an example of multiple windows in Krita."
msgstr ""

msgid ".. image:: images/en/Multi-window.png"
msgstr ""

#: ../../user_manual/getting_started/basic_concepts.rst:117
msgid "Canvas in Krita"
msgstr ""

#: ../../user_manual/getting_started/basic_concepts.rst:119
msgid ""
"When you create a new document in Krita for the first time you will see a"
" rectangular white area. This is called a canvas. You can see it in the "
"image below. The area marked by a red rectangle is a canvas."
msgstr ""

msgid ".. image:: images/en/Canvas-krita.png"
msgstr ""

#: ../../user_manual/getting_started/basic_concepts.rst:126
msgid ""
"When you save the painting as jpg , png etc or take a print out of the "
"painting, only the content inside this area is taken into consideration. "
"Anything beyond it is ignored. Krita does store information beyond this "
"area, you just won't be able to see it. This data is stored in the "
"**Layers**."
msgstr ""

#: ../../user_manual/getting_started/basic_concepts.rst:130
msgid "Layers and Compositing"
msgstr ""

#: ../../user_manual/getting_started/basic_concepts.rst:132
msgid ""
"Like a landscape painter will first paint the sky and then the furthest "
"away elements before slowly working his way to the foreground elements, "
"computers will do the same with all the things you tell them to draw. So,"
" if you tell them to draw a circle after a square on the same spot, the "
"circle will always be drawn later. This is called the **Drawing Order**."
msgstr ""

#: ../../user_manual/getting_started/basic_concepts.rst:135
msgid ""
"The layer stack is a way for you to separate elements of a drawing and "
"manipulate the drawing order by showing you which layers are drawn when, "
"and allowing you to change the order they are drawn in, and all sorts of "
"other effects. This is called **Compositing**."
msgstr ""

#: ../../user_manual/getting_started/basic_concepts.rst:138
msgid ""
"This allows you to have line art above the colours, or trees before the "
"mountains, and edit each without affecting the other."
msgstr ""

#: ../../user_manual/getting_started/basic_concepts.rst:141
msgid "Krita has many layer-types, each doing a slightly different thing:"
msgstr ""

#: ../../user_manual/getting_started/basic_concepts.rst:144
msgid ":ref:`paint_layers`"
msgstr ""

#: ../../user_manual/getting_started/basic_concepts.rst:145
msgid ""
"Also known as raster layers, and the most common layer type, you will be "
"painting on these."
msgstr ""

#: ../../user_manual/getting_started/basic_concepts.rst:146
msgid ":ref:`vector_layers`"
msgstr ""

#: ../../user_manual/getting_started/basic_concepts.rst:147
msgid ""
"This is a layer type on which you draw vector graphics. Vector graphics "
"are typically more simple than raster graphics and with the benefit that "
"you can deform them with less blurriness."
msgstr ""

#: ../../user_manual/getting_started/basic_concepts.rst:148
msgid ":ref:`group_layers`"
msgstr ""

#: ../../user_manual/getting_started/basic_concepts.rst:149
msgid ""
"These allow you to group several layers via drag and drop, so you can "
"organize, move, apply masks and perform other actions on them together."
msgstr ""

#: ../../user_manual/getting_started/basic_concepts.rst:150
msgid ":ref:`clone_layers`"
msgstr ""

#: ../../user_manual/getting_started/basic_concepts.rst:151
msgid ""
"These are copies of the layer you selected when making them. They get "
"updated automatically when changing the original."
msgstr ""

#: ../../user_manual/getting_started/basic_concepts.rst:152
msgid ":ref:`file_layers`"
msgstr ""

#: ../../user_manual/getting_started/basic_concepts.rst:153
msgid ""
"These refer to an outside existing image, and update as soon as the "
"outside image updates. Useful for logos and emblems that change a lot."
msgstr ""

#: ../../user_manual/getting_started/basic_concepts.rst:154
msgid ":ref:`fill_layers`"
msgstr ""

#: ../../user_manual/getting_started/basic_concepts.rst:155
msgid ""
"These layers are filled with something that Krita can make up on the fly,"
" like colors or patterns."
msgstr ""

#: ../../user_manual/getting_started/basic_concepts.rst:158
msgid ":ref:`filter_layers`"
msgstr ""

#: ../../user_manual/getting_started/basic_concepts.rst:157
msgid "Adding a filter in the layer-stack. We discuss these later on."
msgstr ""

#: ../../user_manual/getting_started/basic_concepts.rst:160
msgid "You can manipulate the content of the layers with **Tools**."
msgstr ""

#: ../../user_manual/getting_started/basic_concepts.rst:163
msgid "Tools"
msgstr ""

#: ../../user_manual/getting_started/basic_concepts.rst:165
msgid ""
"Tools help you manipulate the image data. The most common one is of "
"course, the freehand brush, which is the default when you open Krita. "
"There are roughly five types of tools in Krita:"
msgstr ""

#: ../../user_manual/getting_started/basic_concepts.rst:168
msgid "Paint Tools"
msgstr ""

#: ../../user_manual/getting_started/basic_concepts.rst:169
msgid ""
"These are tools for painting on paint layers. They describe shapes, like "
"rectangles, circles and straight lines, but also freehand paths. These "
"shapes then get used by the Brush engines to make shapes and drawing "
"effects."
msgstr ""

#: ../../user_manual/getting_started/basic_concepts.rst:170
msgid "Vector Tools"
msgstr ""

#: ../../user_manual/getting_started/basic_concepts.rst:171
msgid ""
"This is the upper row of tools, which are used to edit vectors. "
"Interestingly enough, all paint tools except the freehand brush allow you"
" to draw shapes on the vector layers. These don't get a brush engine "
"effect applied to them, though."
msgstr ""

#: ../../user_manual/getting_started/basic_concepts.rst:172
msgid "Selection Tools"
msgstr ""

#: ../../user_manual/getting_started/basic_concepts.rst:173
msgid ""
"Selections allow you to edit a very specific area of the layer you are "
"working on without affecting the others. The selection tools allow you "
"modify the current selection. This is not unlike using masking-fluids in "
"traditional painting, but whereas using masking fluids and film is often "
"messy and delicate, selections are far easier to use."
msgstr ""

#: ../../user_manual/getting_started/basic_concepts.rst:174
msgid "Guide Tools"
msgstr ""

#: ../../user_manual/getting_started/basic_concepts.rst:175
msgid "These are tools like grids and assistants."
msgstr ""

#: ../../user_manual/getting_started/basic_concepts.rst:178
msgid "Transform Tools"
msgstr ""

#: ../../user_manual/getting_started/basic_concepts.rst:177
msgid ""
"These are tools that allow you to transform your image. More on that "
"later."
msgstr ""

#: ../../user_manual/getting_started/basic_concepts.rst:180
msgid ""
"All tools can be found in the toolbox, and information can be found in "
"the tools section of the manual."
msgstr ""

#: ../../user_manual/getting_started/basic_concepts.rst:183
msgid "Brush Engines"
msgstr ""

#: ../../user_manual/getting_started/basic_concepts.rst:185
msgid ""
"Brush engines, like mentioned before, take a path and tablet information "
"and add effects to it, making a stroke."
msgstr ""

#: ../../user_manual/getting_started/basic_concepts.rst:188
msgid ""
"Engine is a term programmers use to describe a complex interacting set of"
" code that is the core for a certain functionality, and is highly "
"configurable. In short, like the engine of your car drives your car, and "
"the type of engine and its configuration affects how you use your car, "
"the brush engine drives the look and feel of the brush, and different "
"brush engines have different results."
msgstr ""

#: ../../user_manual/getting_started/basic_concepts.rst:191
msgid ""
"Krita has :ref:`a LOT of different brush engines "
"<category_brush_engines>`, all with different effects."
msgstr ""

#: ../../user_manual/getting_started/basic_concepts.rst:197
msgid ".. image:: images/en/Krita_example_differentbrushengines.png"
msgstr ""

#: ../../user_manual/getting_started/basic_concepts.rst:197
msgid ""
"**Left:** pixel brush, **Center:** color smudge brush, **Right:** sketch "
"brush"
msgstr ""

#: ../../user_manual/getting_started/basic_concepts.rst:199
msgid ""
"For example, the pixel-brush engine is simple and allows you to do most "
"of your basic work, but if you do a lot of painting, the color smudge "
"brush engine might be more useful. Even though it's slower to use than "
"the Pixel Brush engine, its mixing of colors allows you to work faster."
msgstr ""

#: ../../user_manual/getting_started/basic_concepts.rst:202
msgid ""
"If you want something totally different than that, the sketch brush "
"engine helps with making messy lines, and the shape brush engine allows "
"you to make big flats quickly. There are a lot of cool effects inside "
"Krita's brush engines, so try them all out, and be sure to check the "
"chapters on each."
msgstr ""

#: ../../user_manual/getting_started/basic_concepts.rst:205
msgid ""
"You can configure these effects via the Brush Settings drop-down, which "
"can be quickly accessed via :kbd:`f5`. These configurations can then be "
"saved into presets, which you can quickly access with :kbd:`f6` or the "
"Brush Presets docker."
msgstr ""

#: ../../user_manual/getting_started/basic_concepts.rst:208
msgid "Brushes draw with colors, but how do computers understand colors?"
msgstr ""

#: ../../user_manual/getting_started/basic_concepts.rst:211
msgid "Colors"
msgstr ""

#: ../../user_manual/getting_started/basic_concepts.rst:213
msgid ""
"Humans can see a few million colors, which are combinations of "
"electromagnetic waves (light) bouncing off a surface, where the surface "
"absorbs some of it."
msgstr ""

#: ../../user_manual/getting_started/basic_concepts.rst:219
msgid ".. image:: images/en/Krita_basics_primaries.png"
msgstr ""

#: ../../user_manual/getting_started/basic_concepts.rst:219
msgid ""
"Subtractive CMY colors on the left and additive RGB colors on the right. "
"This difference means that printers benefit from color conversion before "
"printing"
msgstr ""

#: ../../user_manual/getting_started/basic_concepts.rst:221
msgid ""
"When painting traditionally, we use pigments which also absorb the right "
"light-waves for the color we want it to have, but the more pigments you "
"combine, the more light is absorbed, leading to a kind of murky black. "
"This is why we call the mixing of paints **subtractive**, as it subtracts"
" light the more pigments you put together. Because of that, in "
"traditional pigment mixing, our most efficient primaries are three fairly"
" light colors: Cyan blue and Magenta red and Yellow (CMY)."
msgstr ""

#: ../../user_manual/getting_started/basic_concepts.rst:224
msgid ""
"A computer also uses three primaries and uses a specific amount of each "
"primary in a color as the way it stores color. However, a computer is a "
"screen that emits light. So it makes more light, which means it needs to "
"do **additive** mixing, where adding more and more colored lights result "
"in white. This is why the three most efficient primaries, as used by "
"computers are Red, Green and Blue (RGB)."
msgstr ""

#: ../../user_manual/getting_started/basic_concepts.rst:227
msgid ""
"Per pixel, a computer then stores the value of each of these primaries, "
"with the maximum depending on the bit-depth. These are called the "
"**components** or **channels** depending on who you talk to."
msgstr ""

#: ../../user_manual/getting_started/basic_concepts.rst:232
msgid ".. image:: images/en/Krita_basic_channel_rose.png"
msgstr ""

#: ../../user_manual/getting_started/basic_concepts.rst:232
msgid ""
"This is the red-channel of an image of a red rose. As you can see, the "
"petals are white here, indicating that those areas contain full red. The "
"leaves are much darker, indicating a lack of red, which is to be "
"expected, as they are green."
msgstr ""

#: ../../user_manual/getting_started/basic_concepts.rst:234
msgid ""
"Though by default computers use RGB, they can also convert to CMYK (the "
"subtractive model), or a perceptual model like LAB. In all cases this is "
"just a different way of indicating how the colors relate to each other, "
"and each time it usually has 3 components. The exception here is "
"grayscale, because the computer only needs to remember how white a color "
"is. This is why grayscale is more efficient memory-wise."
msgstr ""

#: ../../user_manual/getting_started/basic_concepts.rst:237
msgid ""
"In fact, if you look at each channel separately, they also look like "
"grayscale images, but instead white just means how much Red, Green or "
"Blue there is."
msgstr ""

#: ../../user_manual/getting_started/basic_concepts.rst:240
msgid ""
"Krita has a very complex color management system, which you can read more"
" about :ref:`here <general_concept_color>`."
msgstr ""

#: ../../user_manual/getting_started/basic_concepts.rst:243
msgid "Transparency"
msgstr ""

#: ../../user_manual/getting_started/basic_concepts.rst:245
msgid ""
"Just like Red, Green and Blue, the computer can also store how "
"transparent a pixel is. This is important for **compositing** as "
"mentioned before. After all, there's no point in having multiple layers "
"if you can't have transparency."
msgstr ""

#: ../../user_manual/getting_started/basic_concepts.rst:248
msgid ""
"Transparency is stored in the same way as colors, meaning that it's also "
"a channel. We usually call this channel the **alpha channel** or "
"**alpha** for short. The reason behind this is because the letter 'α' is "
"used to represent it in programming."
msgstr ""

#: ../../user_manual/getting_started/basic_concepts.rst:251
msgid ""
"Some older programs don't always have transparency by default. Krita is "
"the opposite: it doesn't understand images that don't track transparency,"
" and will always add a transparency channel to images. When a given pixel"
" is completely transparent on all layers, Krita will instead show a "
"checkerboard pattern, like the rose image to the left."
msgstr ""

#: ../../user_manual/getting_started/basic_concepts.rst:254
msgid "Blending modes"
msgstr ""

#: ../../user_manual/getting_started/basic_concepts.rst:256
msgid ""
"Because colors are stored as numbers you can do maths with them. We call "
"this **Blending Modes** or **Compositing Modes**."
msgstr ""

#: ../../user_manual/getting_started/basic_concepts.rst:259
msgid ""
"Blending modes can be done per layer or per brush stroke, and thus are "
"also part of the compositing of layers."
msgstr ""

#: ../../user_manual/getting_started/basic_concepts.rst:263
msgid "Multiply"
msgstr ""

#: ../../user_manual/getting_started/basic_concepts.rst:263
msgid ""
"A commonly used blending mode is for example :menuselection:`Multiply` "
"which multiplies the components, leading to darker colors. This allows "
"you to simulate the subtractive mixing, and thus makes painting shadows "
"much easier."
msgstr ""

#: ../../user_manual/getting_started/basic_concepts.rst:265
msgid "Addition"
msgstr ""

#: ../../user_manual/getting_started/basic_concepts.rst:266
msgid ""
"Another common one is :menuselection:`Addition`, which adds one layer's "
"components to the other, making it perfect for special glow effects."
msgstr ""

#: ../../user_manual/getting_started/basic_concepts.rst:267
msgid "Erasing"
msgstr ""

#: ../../user_manual/getting_started/basic_concepts.rst:268
msgid ""
":menuselection:`Erasing` is a blending mode in Krita. There is no eraser "
"tool, but you can toggle on the brush quickly with :kbd:`E` to become an "
"eraser. You can also use it on layers. Unlike the other blending modes, "
"this one only affects the alpha channel, making things more transparent."
msgstr ""

#: ../../user_manual/getting_started/basic_concepts.rst:271
msgid "Normal"
msgstr ""

#: ../../user_manual/getting_started/basic_concepts.rst:270
msgid ""
"The :menuselection:`Normal` blend mode just averages between colors "
"depending on how transparent the topmost color is."
msgstr ""

#: ../../user_manual/getting_started/basic_concepts.rst:273
msgid ""
"Krita has 76 blending modes, each doing slightly different things. Head "
"over to the :ref:`blending_modes` to learn more."
msgstr ""

#: ../../user_manual/getting_started/basic_concepts.rst:276
msgid ""
"Because we can see channels as grayscale images, we can convert grayscale"
" images into channels. Like for example, we can use a grayscale image for"
" the transparency. We call these **Masks**."
msgstr ""

#: ../../user_manual/getting_started/basic_concepts.rst:279
msgid "Masks"
msgstr ""

#: ../../user_manual/getting_started/basic_concepts.rst:281
msgid ""
"Masks are a type of sub-effect applied to a layer, usually driven by a "
"grayscale image."
msgstr ""

#: ../../user_manual/getting_started/basic_concepts.rst:283
msgid ""
"The primary type of mask is a :ref:`transparency_masks`, which allows you"
" to use a grayscale image to determine the transparency, where black "
"makes everything transparent and white makes the pixel fully opaque."
msgstr ""

#: ../../user_manual/getting_started/basic_concepts.rst:285
msgid ""
"You can paint on masks with any of the brushes, or convert a normal "
"paint-layer to a mask. The big benefit of masks is that you can make "
"things transparent without removing the underlying pixels. Furthermore, "
"you can use masks to reveal or hide a whole group layer at once!"
msgstr ""

#: ../../user_manual/getting_started/basic_concepts.rst:287
msgid "For example, we have a white ghost lady here:"
msgstr ""

msgid ".. image:: images/en/Krita_ghostlady_1.png"
msgstr ""

#: ../../user_manual/getting_started/basic_concepts.rst:293
msgid ""
"But you can't really tell whether she's a ghost lady or just really "
"really white. If only we could give the idea that she floats... We right-"
"click the layer and add a transparency mask. Then, we select that mask "
"and draw with a black and white linear gradient so that the black is "
"below."
msgstr ""

msgid ".. image:: images/en/Krita_ghostlady_2.png"
msgstr ""

#: ../../user_manual/getting_started/basic_concepts.rst:300
msgid ""
"Wherever the black is, there the lady now becomes transparent, turning "
"her into a real ghost!"
msgstr ""

#: ../../user_manual/getting_started/basic_concepts.rst:303
msgid ""
"The name mask comes from traditional masking fluid and film. You may "
"recall the earlier comparison of selections to traditional masking fluid."
" Selections too are stored internally as grayscale images, and you can "
"save them as a local selection which is kind of like a mask, or convert "
"them to a transparency mask."
msgstr ""

#: ../../user_manual/getting_started/basic_concepts.rst:306
msgid "Filters"
msgstr ""

#: ../../user_manual/getting_started/basic_concepts.rst:308
msgid ""
"We mentioned earlier that you can do maths with colors. But you can also "
"do maths with pixels, or groups of pixels or whole layers. In fact, you "
"can make Krita do all sorts of little operations on layers. We call these"
" operations **Filters**."
msgstr ""

#: ../../user_manual/getting_started/basic_concepts.rst:311
msgid "Examples of such operations are:"
msgstr ""

#: ../../user_manual/getting_started/basic_concepts.rst:314
msgid "Desaturate"
msgstr ""

#: ../../user_manual/getting_started/basic_concepts.rst:315
msgid "This makes all the pixels turn grey."
msgstr ""

#: ../../user_manual/getting_started/basic_concepts.rst:316
msgid "Blur"
msgstr ""

#: ../../user_manual/getting_started/basic_concepts.rst:317
msgid ""
"This averages the pixels with their neighbours, which removes sharp "
"contrasts and makes the whole image look blurry."
msgstr ""

#: ../../user_manual/getting_started/basic_concepts.rst:318
msgid "Sharpen"
msgstr ""

#: ../../user_manual/getting_started/basic_concepts.rst:319
msgid ""
"This increases the contrast between pixels that had a pretty high "
"contrast to begin with."
msgstr ""

#: ../../user_manual/getting_started/basic_concepts.rst:321
msgid "Color to Alpha"
msgstr ""

#: ../../user_manual/getting_started/basic_concepts.rst:321
msgid "A popular filter which makes all of the chosen color transparent."
msgstr ""

#: ../../user_manual/getting_started/basic_concepts.rst:327
msgid ".. image:: images/en/Krita_basic_filter_brush.png"
msgstr ""

#: ../../user_manual/getting_started/basic_concepts.rst:327
msgid "Different filter brushes being used on different parts of the image."
msgstr ""

#: ../../user_manual/getting_started/basic_concepts.rst:329
msgid ""
"Krita has many more filters available: read about them :ref:`here "
"<filters>`."
msgstr ""

#: ../../user_manual/getting_started/basic_concepts.rst:332
msgid ":ref:`filter_brush_engine`"
msgstr ""

#: ../../user_manual/getting_started/basic_concepts.rst:334
msgid ""
"Because many of these operations are per pixel, Krita allows you to use "
"the filter as part of the :ref:`filter_brush_engine`."
msgstr ""

#: ../../user_manual/getting_started/basic_concepts.rst:336
msgid ""
"In most image manipulation software, these are separate tools, but Krita "
"has it as a brush engine, allowing much more customisation than usual."
msgstr ""

#: ../../user_manual/getting_started/basic_concepts.rst:338
msgid ""
"This means you can make a brush that desaturates pixels, or a brush that "
"changes the hue of the pixels underneath."
msgstr ""

#: ../../user_manual/getting_started/basic_concepts.rst:341
msgid "Filter Layers, Filter Masks and Layerstyles"
msgstr ""

#: ../../user_manual/getting_started/basic_concepts.rst:343
msgid ""
"Krita also allows you to let the Filters be part of the layer stack, via "
":ref:`filter_layers` and :ref:`filter_masks`. Filter Layers affect all "
"the layers underneath it in the same hierarchy. Transparency and "
"transparency masks on Filter Layers affect where the layer is applied."
msgstr ""

#: ../../user_manual/getting_started/basic_concepts.rst:346
msgid ""
"Masks, on the other hand, can affect one single layer and are driven by a"
" grayscale image. They will also affect all layers in a group, much like "
"a transparency mask."
msgstr ""

#: ../../user_manual/getting_started/basic_concepts.rst:349
msgid ""
"We can use these filters to make our ghost lady look even more ethereal, "
"by selecting the ghost lady's layer, and then creating a clone layer. We "
"then right click and add a filter mask and use gaussian blur set to 10 or"
" so pixels. The clone layer is then put behind the original layer, and "
"set to the blending mode '**Color Dodge**', giving her a definite spooky "
"glow. You can keep on painting on the original layer and everything will "
"get updated automatically!"
msgstr ""

msgid ".. image:: images/en/Krita_ghostlady_3.png"
msgstr ""

#: ../../user_manual/getting_started/basic_concepts.rst:355
msgid ""
"Layer Effects or Layer Styles are :program:`Photoshop's` unique brand of "
"Filter Masks that are a little faster than regular masks, but not as "
"versatile. They are available by right clicking a layer and selecting "
"'layer style'."
msgstr ""

#: ../../user_manual/getting_started/basic_concepts.rst:358
msgid "Transformations"
msgstr ""

#: ../../user_manual/getting_started/basic_concepts.rst:360
msgid ""
"**Transformations** are kind of like filters, in that these are "
"operations done on the pixels of an image.  We have regular image and "
"layer wide transformations in the image and layer top menus, so that you "
"may resize, flip and rotate the whole image."
msgstr ""

#: ../../user_manual/getting_started/basic_concepts.rst:363
msgid ""
"We also have the :ref:`crop_tool`, which only affects the canvas size, "
"and the :ref:`move_tool` which only moves a given layer. However, if you "
"want more control, Krita offers a :ref:`transform_tool`."
msgstr ""

msgid ".. image:: images/en/Krita_transforms_free.png"
msgstr ""

#: ../../user_manual/getting_started/basic_concepts.rst:370
msgid ""
"With this tool you can rotate and resize on the canvas, or put it in "
"perspective. Or you can use advanced transform tools, like the warp, cage"
" and liquefy, which allow you to transform by drawing custom points or "
"even by pretending it's a transforming brush."
msgstr ""

#: ../../user_manual/getting_started/basic_concepts.rst:373
msgid ":ref:`deform_brush_engine`"
msgstr ""

#: ../../user_manual/getting_started/basic_concepts.rst:375
msgid ""
"Like the filter brush engine, Krita also has a Deform Brush Engine, which"
" allows you to transform with a brush. The deform is like a much faster "
"version of the Liquefy transform tool mode, but in exchange, its results "
"are of much lower quality."
msgstr ""

#: ../../user_manual/getting_started/basic_concepts.rst:381
msgid ".. image:: images/en/Krita_transforms_deformvsliquefy.png"
msgstr ""

#: ../../user_manual/getting_started/basic_concepts.rst:381
msgid ""
"Apple transformed into a pear with liquefy on the left and deform brush "
"on the right."
msgstr ""

#: ../../user_manual/getting_started/basic_concepts.rst:383
msgid "Furthermore, you can't apply the deform brush as a non-destructive mask."
msgstr ""

#: ../../user_manual/getting_started/basic_concepts.rst:386
msgid ":ref:`transformation_masks`"
msgstr ""

#: ../../user_manual/getting_started/basic_concepts.rst:388
msgid ""
"Like filters, transforms can be applied as a non destructive operation "
"that is part of the layer stack. Unlike filter and transparency masks "
"however, transform masks can't be driven by a grayscale image, for "
"technical reasons."
msgstr ""

#: ../../user_manual/getting_started/basic_concepts.rst:391
msgid "You can use transform masks to deform clone and file layers as well."
msgstr ""

#: ../../user_manual/getting_started/basic_concepts.rst:394
msgid ":ref:`animation`"
msgstr ""

msgid ".. image:: images/en/Introduction_to_animation_walkcycle_02.gif"
msgstr ""

#: ../../user_manual/getting_started/basic_concepts.rst:399
msgid ""
"In 3.0, Krita got raster animation support. You can use the timeline, "
"animation and onionskin dockers, plus Krita's amazing variety of brushes "
"to do raster based animations, export those, and then turn them into "
"movies or gifs."
msgstr ""

#: ../../user_manual/getting_started/basic_concepts.rst:403
msgid "Assistants, Grids and Guides"
msgstr ""

#: ../../user_manual/getting_started/basic_concepts.rst:405
msgid ""
"With all this technical stuff, you might forget that Krita is a painting "
"program. Like how a illustrator in real life can have all sorts of "
"equipment to make drawing easier, Krita also offers a variety of tools:"
msgstr ""

#: ../../user_manual/getting_started/basic_concepts.rst:411
msgid ".. image:: images/en/Krita_basic_assistants.png"
msgstr ""

#: ../../user_manual/getting_started/basic_concepts.rst:411
msgid "Krita's vanishing point assistants in action"
msgstr ""

#: ../../user_manual/getting_started/basic_concepts.rst:414
msgid ":ref:`grids_and_guides_docker`"
msgstr ""

#: ../../user_manual/getting_started/basic_concepts.rst:415
msgid ""
"Very straightforward guiding tools which shows a grids or guiding lines "
"that can be configured."
msgstr ""

#: ../../user_manual/getting_started/basic_concepts.rst:416
msgid ":ref:`snapping`"
msgstr ""

#: ../../user_manual/getting_started/basic_concepts.rst:417
msgid ""
"You can snap to all sorts of things. Grids, guides, extensions, "
"orthogonals, image centers and bounding boxes."
msgstr ""

#: ../../user_manual/getting_started/basic_concepts.rst:420
msgid ":ref:`painting_with_assistants`"
msgstr ""

#: ../../user_manual/getting_started/basic_concepts.rst:419
msgid ""
"Because you can hardly put a ruler against your tablet to help you draw, "
"the assistants are there to help you draw concentric circles, "
"perspectives, parallel lines and other easily forgotten but tricky to "
"draw details. Krita allows you to snap to these via the tool options as "
"well."
msgstr ""

#: ../../user_manual/getting_started/basic_concepts.rst:422
msgid ""
"These guides are saved into Krita's native format, which means you can "
"pick up your work easily afterwards."
msgstr ""

#: ../../user_manual/getting_started/basic_concepts.rst:425
msgid "Customisation"
msgstr ""

#: ../../user_manual/getting_started/basic_concepts.rst:427
msgid "This leads to the final concept: Customisation."
msgstr ""

#: ../../user_manual/getting_started/basic_concepts.rst:430
msgid ""
"In addition to rearranging the dockers according to your preferences, "
"Krita provides and saves your configurations as "
":ref:`resource_workspaces`. This is the button at the top right."
msgstr ""

#: ../../user_manual/getting_started/basic_concepts.rst:433
msgid ""
"You can also configure the toolbar via :menuselection:`settings --> "
"configure Toolbars`, as well as the shortcuts under both "
":menuselection:`settings --> Configure Krita --> Configure Shortcuts` and"
" :menuselection:`settings --> configure Krita --> Canvas Input Settings`."
msgstr ""

#: ../../user_manual/getting_started/basic_concepts.rst:436
msgid ""
".. image:: images/icons/Krita_mouse_left.png\n"
"   :alt: mouseleft"
msgstr ""

#: ../../user_manual/getting_started/basic_concepts.rst:438
msgid ""
".. image:: images/icons/Krita_mouse_right.png\n"
"   :alt: mouseright"
msgstr ""

#: ../../user_manual/getting_started/basic_concepts.rst:440
msgid ""
".. image:: images/icons/Krita_mouse_middle.png\n"
"   :alt: mousemiddle"
msgstr ""

#: ../../user_manual/getting_started/basic_concepts.rst:442
msgid ""
".. image:: images/icons/Krita_mouse_scroll.png\n"
"   :alt: mousescroll"
msgstr ""

#: ../../user_manual/getting_started/basic_concepts.rst:444
msgid ""
".. image:: images/icons/shape_select_tool.svg\n"
"   :alt: toolshapeselection"
msgstr ""

#: ../../user_manual/getting_started/basic_concepts.rst:446
msgid ""
".. image:: images/icons/shape_edit_tool.svg\n"
"   :alt: toolshapeedit"
msgstr ""

#: ../../user_manual/getting_started/basic_concepts.rst:448
msgid ""
".. image:: images/icons/text-tool.svg\n"
"   :alt: tooltext"
msgstr ""

#: ../../user_manual/getting_started/basic_concepts.rst:450
msgid ""
".. image:: images/icons/calligraphy_tool.svg\n"
"   :alt: toolcalligraphy"
msgstr ""

#: ../../user_manual/getting_started/basic_concepts.rst:452
msgid ""
".. image:: images/icons/gradient_edit_tool.svg\n"
"   :alt: toolgradientedit"
msgstr ""

#: ../../user_manual/getting_started/basic_concepts.rst:454
msgid ""
".. image:: images/icons/pattern_tool.svg\n"
"   :alt: toolpatternedit"
msgstr ""

#: ../../user_manual/getting_started/basic_concepts.rst:456
msgid ""
".. image:: images/icons/freehand_brush_tool.svg\n"
"   :alt: toolfreehandbrush"
msgstr ""

#: ../../user_manual/getting_started/basic_concepts.rst:458
msgid ""
".. image:: images/icons/line_tool.svg\n"
"   :alt: toolline"
msgstr ""

#: ../../user_manual/getting_started/basic_concepts.rst:460
msgid ""
".. image:: images/icons/rectangle_tool.svg\n"
"   :alt: toolrectangle"
msgstr ""

#: ../../user_manual/getting_started/basic_concepts.rst:462
msgid ""
".. image:: images/icons/ellipse_tool.svg\n"
"   :alt: toolellipse"
msgstr ""

#: ../../user_manual/getting_started/basic_concepts.rst:464
msgid ""
".. image:: images/icons/polygon_tool.svg\n"
"   :alt: toolpolygon"
msgstr ""

#: ../../user_manual/getting_started/basic_concepts.rst:466
msgid ""
".. image:: images/icons/polyline_tool.svg\n"
"   :alt: toolpolyline"
msgstr ""

#: ../../user_manual/getting_started/basic_concepts.rst:468
msgid ""
".. image:: images/icons/bezier_curve.svg\n"
"   :alt: toolbeziercurve"
msgstr ""

#: ../../user_manual/getting_started/basic_concepts.rst:470
msgid ""
".. image:: images/icons/freehand_path_tool.svg\n"
"   :alt: toolfreehandpath"
msgstr ""

#: ../../user_manual/getting_started/basic_concepts.rst:472
msgid ""
".. image:: images/icons/dyna_tool.svg\n"
"   :alt: tooldyna"
msgstr ""

#: ../../user_manual/getting_started/basic_concepts.rst:474
msgid ""
".. image:: images/icons/multibrush_tool.svg\n"
"   :alt: toolmultibrush"
msgstr ""

#: ../../user_manual/getting_started/basic_concepts.rst:476
msgid ""
".. image:: images/icons/assistant_tool.svg\n"
"   :alt: toolassistant"
msgstr ""

#: ../../user_manual/getting_started/basic_concepts.rst:478
msgid ""
".. image:: images/icons/move_tool.svg\n"
"   :alt: toolmove"
msgstr ""

#: ../../user_manual/getting_started/basic_concepts.rst:480
msgid ""
".. image:: images/icons/transform_tool.svg\n"
"   :alt: tooltransform"
msgstr ""

#: ../../user_manual/getting_started/basic_concepts.rst:482
msgid ""
".. image:: images/icons/grid_tool.svg\n"
"   :alt: toolgrid"
msgstr ""

#: ../../user_manual/getting_started/basic_concepts.rst:484
msgid ""
".. image:: images/icons/perspectivegrid_tool.svg\n"
"   :alt: toolperspectivegrid"
msgstr ""

#: ../../user_manual/getting_started/basic_concepts.rst:486
msgid ""
".. image:: images/icons/measure_tool.svg\n"
"   :alt: toolmeasure"
msgstr ""

#: ../../user_manual/getting_started/basic_concepts.rst:488
msgid ""
".. image:: images/icons/color_picker_tool.svg\n"
"   :alt: toolcolorpicker"
msgstr ""

#: ../../user_manual/getting_started/basic_concepts.rst:490
msgid ""
".. image:: images/icons/fill_tool.svg\n"
"   :alt: toolfill"
msgstr ""

#: ../../user_manual/getting_started/basic_concepts.rst:492
msgid ""
".. image:: images/icons/gradient_drawing_tool.svg\n"
"   :alt: toolgradient"
msgstr ""

#: ../../user_manual/getting_started/basic_concepts.rst:494
msgid ""
".. image:: images/icons/colorizemask_tool.svg\n"
"   :alt: toolcolorizemask"
msgstr ""

#: ../../user_manual/getting_started/basic_concepts.rst:496
msgid ""
".. image:: images/icons/smart_patch_tool.svg\n"
"   :alt: toolsmartpatch"
msgstr ""

#: ../../user_manual/getting_started/basic_concepts.rst:498
msgid ""
".. image:: images/icons/crop_tool.svg\n"
"   :alt: toolcrop"
msgstr ""

#: ../../user_manual/getting_started/basic_concepts.rst:500
msgid ""
".. image:: images/icons/rectangular_select_tool.svg\n"
"   :alt: toolselectrect"
msgstr ""

#: ../../user_manual/getting_started/basic_concepts.rst:502
msgid ""
".. image:: images/icons/elliptical_select_tool.svg\n"
"   :alt: toolselectellipse"
msgstr ""

#: ../../user_manual/getting_started/basic_concepts.rst:504
msgid ""
".. image:: images/icons/polygonal_select_tool.svg\n"
"   :alt: toolselectpolygon"
msgstr ""

#: ../../user_manual/getting_started/basic_concepts.rst:506
msgid ""
".. image:: images/icons/path_select_tool.svg\n"
"   :alt: toolselectpath"
msgstr ""

#: ../../user_manual/getting_started/basic_concepts.rst:508
msgid ""
".. image:: images/icons/outline_select_tool.svg\n"
"   :alt: toolselectoutline"
msgstr ""

#: ../../user_manual/getting_started/basic_concepts.rst:510
msgid ""
".. image:: images/icons/contiguous_select_tool.svg\n"
"   :alt: toolselectcontiguous"
msgstr ""

#: ../../user_manual/getting_started/basic_concepts.rst:512
msgid ""
".. image:: images/icons/similar_select_tool.svg\n"
"   :alt: toolselectsimilar"
msgstr ""

#: ../../user_manual/getting_started/basic_concepts.rst:514
msgid ""
".. image:: images/icons/pan_tool.svg\n"
"   :alt: toolpan"
msgstr ""

#: ../../user_manual/getting_started/basic_concepts.rst:516
msgid ""
".. image:: images/icons/zoom_tool.svg\n"
"   :alt: toolzoom"
msgstr ""

